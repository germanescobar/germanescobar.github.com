---
layout: post
title: The Git Workflow at Elibom
---

h1. The Git Workflow at Elibom

Now that I'm *not* the only developer at "elibom.com":http://www.elibom.com/, I had to choose a git workflow for our nascent team. The problem, however, is that git is so flexible that there are multiple solutions you can choose from. That's why I decided to write this post describing the workflow that we are currently using, largely based on "this post from reinh.com":http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html which I really encourage you to read.

We use a "centralized workflow":http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows#Centralized-Workflow with a private repository at "Github":http://www.github.com/ and we all have _push access_ to it. There are two important rules though:

# No one is allowed to push to the master branch directly.
# There is only one integrator that merges changes into the master branch.

h2. 1. Creating a branch

Whenever you need to work on a new feature or issue, the first step is to update the master branch and create a new one.

<pre class="sunlight-highlight-bash">git checkout master
git pull
git checkout -b issue-xx-brief-description
</pre>

At this point you are ready to start hacking. Notice that the name of the branch has the id of the issue you are working on and a brief description to easily identify it.

h2. 2. Working on the branch

I always encourage the team to commit often. This has multiple advantages and you can always reorder and change your commits before pushing them to the remote repository. I usually squash them in one or two commits when I'm done.

Before you push a your branch always run the following commands:

<pre class="sunlight-highlight-bash">git fetch origin
git rebase origin/master
</pre>

This applies our changes on top of the master branch making sure that there will be no conflicts when merging into master[1].

h2. 3. Pushing and initiating the pull request

To push a branch to the remote repository run the following command[2]:

<pre class="sunlight-highlight-bash">git push -u origin <name_of_branch></pre>

Now we need to ask the integrator to merge our branch. We do this by opening a pull request[3] in "Github":http://www.github.com/. We found a problem here because "Github":http://www.github.com/ creates a new issue for each pull request and we are already using "Github Issues":https://github.com/blog/831-issues-2-0-the-next-generation. What we really want is to attach our pull request to an existing issue.

Fortunately, there is a tool call "hub":https://github.com/defunkt/hub that you can use to create a pull request and attach it to a "Github":http://www.elibom.com/ issue using a single command:

<pre class="sunlight-highlight-bash">hub pull-request -i <issue_number></pre>

Our pull request is now ready to be merged by the integrator, who can do some code review at this point, further discuss the issue and even ask for some changes to the code[4].

h2. Caveats

There are some caveats that you should be aware of:

- If there are multiple pull requests opened that conflict with each other, the integrator will have to solve them. The other option is to merge one and ask the other developer to solve them[5].

- Never do a rebase if you have already pushed a branch. First delete the remote branch with the following command and then push again.

<pre class="sunlight-highlight-bash">git push --delete origin <name_of_branch></pre>

<br>
This workflow has worked really well for us and I hope it helps other teams deciding on their git workflow.
<br>

fn1. If there are conflicts you will have to solve them yourself at this point.

fn2. The -u flag tells git to start "tracking the branch":http://git-scm.com/book/en/Git-Branching-Remote-Branches#Tracking-Branches.

fn3. Git comes with a pull-request command but it's different from the one of Github.

fn4. Both the developer and the integrator can push more commits to the branch which will become part of the pull request.

fn5. He/she will have to delete the remote branch, rebase and then push again.